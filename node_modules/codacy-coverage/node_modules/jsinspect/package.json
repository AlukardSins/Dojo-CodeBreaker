{
  "_args": [
    [
      {
        "raw": "jsinspect@https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
        "scope": null,
        "escapedName": "jsinspect",
        "name": "jsinspect",
        "rawSpec": "https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
        "spec": "https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
        "type": "remote"
      },
      "/home/estudiantes/daniel.rodriguez1/Documents/Dojo-CodeBreaker/node_modules/codacy-coverage"
    ]
  ],
  "_from": "jsinspect@https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
  "_id": "jsinspect@0.12.7",
  "_inCache": true,
  "_location": "/codacy-coverage/jsinspect",
  "_phantomChildren": {
    "color-convert": "1.9.0",
    "escape-string-regexp": "1.0.5"
  },
  "_requested": {
    "raw": "jsinspect@https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
    "scope": null,
    "escapedName": "jsinspect",
    "name": "jsinspect",
    "rawSpec": "https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
    "spec": "https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
  "_shasum": "a3f8eea47ca8931b94d62062089ebda099866854",
  "_shrinkwrap": null,
  "_spec": "jsinspect@https://registry.npmjs.org/jsinspect/-/jsinspect-0.12.7.tgz",
  "_where": "/home/estudiantes/daniel.rodriguez1/Documents/Dojo-CodeBreaker/node_modules/codacy-coverage",
  "author": {
    "name": "Daniel St. Jules",
    "email": "danielst.jules@gmail.com"
  },
  "bin": {
    "jsinspect": "./bin/jsinspect"
  },
  "bugs": {
    "url": "https://github.com/danielstjules/jsinspect/issues"
  },
  "dependencies": {
    "babylon": "6.16.1",
    "chalk": "^2.1.0",
    "commander": "^2.11.0",
    "filepaths": "0.3.0",
    "stable": "^0.1.6",
    "strip-indent": "^1.0.1",
    "strip-json-comments": "1.0.2"
  },
  "description": "Detect structural similarities in your code",
  "devDependencies": {
    "concat-stream": "^1.5.0",
    "dirmap": "^0.0.2",
    "expect.js": "^0.3.1",
    "mocha": "^3.5.0"
  },
  "homepage": "https://github.com/danielstjules/jsinspect",
  "keywords": [
    "inspect",
    "detect",
    "code",
    "duplicate",
    "structure",
    "copy",
    "paste"
  ],
  "license": "MIT",
  "name": "jsinspect",
  "optionalDependencies": {},
  "readme": "![jsinspect](http://danielstjules.com/github/jsinspect-logo.png)\n\nDetect copy-pasted and structurally similar JavaScript code. Requires Node.js\n6.0+, and supports ES6, JSX as well as Flow. Note: the project has been mostly\nrewritten for the 0.10 release and saw several breaking changes.\n\n[![Build Status](https://travis-ci.org/danielstjules/jsinspect.svg?branch=master)](https://travis-ci.org/danielstjules/jsinspect)\n\n* [Overview](#overview)\n* [Installation](#installation)\n* [Usage](#usage)\n* [Integration](#integration)\n* [Reporters](#reporters)\n\n## Overview\n\nWe've all had to deal with code smell, and duplicate code is a common source.\nWhile some instances are easy to spot, this type of searching is the perfect\nuse-case for a helpful CLI tool.\n\nExisting solutions do exist for this purpose, but some struggle with code\nthat has wildly varying identifiers or literals, and others have lackluster\nsupport for the JS ecosystem: ES6, JSX, Flow, ignoring module declarations\nand imports, etc.\n\nAnd copy-pasted code is but one type of code duplication. Common boilerplate\nand repeated logic can be identified as well using jsinspect, since it\ndoesn't operate directly on tokens - it uses the ASTs of the parsed code.\n\nYou have the freedom to specify a threshold determining the smallest subset of\nnodes to analyze. This will identify code with a similar structure, based\non the AST node types, e.g. BlockStatement, VariableDeclaration,\nObjectExpression, etc. By default, it searches nodes with matching identifiers\nand literals for copy-paste oriented detection, but this can be disabled.\nFor context, identifiers include the names of variables, methods, properties,\netc, while literals are strings, numbers, etc.\n\nThe tool accepts a list of paths to parse and prints any found matches. Any\ndirectories among the paths are walked recursively, and only `.js` and `.jsx`\nfiles are analyzed. You can explicitly pass file paths that include a different\nextension as well. Any `node_modules` and `bower_components` dirs are also\nignored.\n\n![screenshot](https://cloud.githubusercontent.com/assets/817212/24126139/bd151a34-0da2-11e7-94a8-9742279c8566.png)\n\n## Installation\n\nIt can be installed via `npm` using:\n\n``` bash\nnpm install -g jsinspect\n```\n\n## Usage\n\n```\nUsage: jsinspect [options] <paths ...>\n\n\nDetect copy-pasted and structurally similar JavaScript code\nExample use: jsinspect -I -L -t 20 --ignore \"test\" ./path/to/src\n\n\nOptions:\n\n  -h, --help                         output usage information\n  -V, --version                      output the version number\n  -t, --threshold <number>           number of nodes (default: 30)\n  -m, --min-instances <number>       min instances for a match (default: 2)\n  -c, --config [config]              path to config file (default: .jsinspectrc)\n  -r, --reporter [default|json|pmd]  specify the reporter to use\n  -I, --no-identifiers               do not match identifiers\n  -L, --no-literals                  do not match literals\n  -C, --no-color                     disable colors\n  --ignore <pattern>                 ignore paths matching a regex\n  --truncate <number>                length to truncate lines (default: 100, off: 0)\n  --debug                            print debug information\n```\n\nIf a `.jsinspectrc` file is located in the project directory, its values will\nbe used in place of the defaults listed above. For example:\n\n``` javascript\n{\n  \"threshold\":     30,\n  \"identifiers\":   true,\n  \"literals\":      true,\n  \"color\":         true,\n  \"minInstances\":  2,\n  \"ignore\":        \"test|spec|mock\",\n  \"reporter\":      \"json\",\n  \"truncate\":      100,\n}\n```\n\nOn first use with a project, you may want to run the tool with the following\noptions, while running explicitly on the lib/src directories, and not the\ntest/spec dir.\n\n```\njsinspect -t 50 --ignore \"test\" ./path/to/src\n```\n\nFrom there, feel free to try decreasing the threshold, ignoring identifiers\nusing the `-I` flag and ignoring literals with `-L`. A lower threshold may lead\nyou to discover new areas of interest for refactoring or cleanup.\n\n## Integration\n\nIt's simple to run jsinspect on your library source as part of a build\nprocess. It will exit with an error code of 0 when no matches are found,\nresulting in a passing step, and a positive error code corresponding to its\nfailure. For example, with Travis CI, you could add the following entries\nto your `.travis.yml`:\n\n``` yaml\nbefore_script:\n  - \"npm install -g jsinspect\"\n\nscript:\n  - \"jsinspect ./path/to/src\"\n```\n\nNote that in the above example, we're using a threshold of 30 for detecting\nstructurally similar code. A higher threshold may be appropriate as well.\n\nTo have jsinspect run with each job, but not block or fail the build, you can\nuse something like the following:\n\n``` yaml\nscript:\n  - \"jsinspect ./path/to/src || true\"\n```\n\n## Reporters\n\nAside from the default reporter, both JSON and PMD CPD-style XML reporters are\navailable. Note that in the JSON example below, indentation and formatting\nhas been applied. Furthermore, the id property available in these reporters is\nuseful for parsing by automatic scripts to determine whether or not duplicate\ncode has changed between builds.\n\n#### JSON\n\n``` json\n[{\n  \"id\":\"6ceb36d5891732db3835c4954d48d1b90368a475\",\n  \"instances\":[\n    {\n      \"path\":\"spec/fixtures/intersection.js\",\n      \"lines\":[1,5],\n      \"code\":\"function intersectionA(array1, array2) {\\n  array1.filter(function(n) {\\n    return array2.indexOf(n) != -1;\\n  });\\n}\"\n    },\n    {\n      \"path\":\"spec/fixtures/intersection.js\",\n      \"lines\":[7,11],\n      \"code\":\"function intersectionB(arrayA, arrayB) {\\n  arrayA.filter(function(n) {\\n    return arrayB.indexOf(n) != -1;\\n  });\\n}\"\n    }\n  ]\n}]\n```\n\n#### PMD CPD XML\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<pmd-cpd>\n<duplication lines=\"10\" id=\"6ceb36d5891732db3835c4954d48d1b90368a475\">\n<file path=\"/jsinspect/spec/fixtures/intersection.js\" line=\"1\"/>\n<file path=\"/jsinspect/spec/fixtures/intersection.js\" line=\"7\"/>\n<codefragment>\nspec/fixtures/intersection.js:1,5\nfunction intersectionA(array1, array2) {\n  array1.filter(function(n) {\n    return array2.indexOf(n) != -1;\n  });\n}\n\nspec/fixtures/intersection.js:7,11\nfunction intersectionB(arrayA, arrayB) {\n  arrayA.filter(function(n) {\n    return arrayB.indexOf(n) != -1;\n  });\n}\n</codefragment>\n</duplication>\n</pmd-cpd>\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danielstjules/jsinspect.git"
  },
  "scripts": {
    "test": "mocha -R spec spec spec/reporters"
  },
  "version": "0.12.7"
}
